#### Misc Ideas ####

"RapidDbic is a jump-starter for a database driven application"




So, this is sort of like a movie with four tracks instead of two. Not only audio and video, but code and command tracks, too.

##################


### NEW Intro ###

Welcome to the RapidApp "Chinook" demo.

In this demo we're going to create a complete web application from the ground up using the RapidApp open-source framework.

We're going to build this application around the free Chinook sample database ...


####################








the structure of this demo to make sense.




And if you don't know about Git, the whole premise of how this demo is structured 

real-time code and command history premise of this 

change tracking concept of this demo




Catalyst, since RapidApp is an extension to Catalyst, which is what we'll be working in.

DBIC, and relational database concepts in general

Git, just so you can follow along in the repo and download the code we'll be building

And finally, Linux and bash just since that is the environment we're working in, within the command shell.

If you're not up to speed on all these topics, don't worry, you can still follow along and learn as you go, and there are plenty of resources available online. This video is designed to make following along as easy as possible, with every command and change recorded .




 users.

This video part covers the preliminary setup of a new Catalyst app

a transparent, 

In this video we'll be  




Everything is live code

 slight of hand

, with functioning example code at every point, as well as providing the full step-by-step 

 parts and sections and the parts and sections they are interested you want to learn about while still 




repository

In order to make this demo more useful than just a video, I'm recording in lock-step with a Git repository, to record everything that happens from the standp[oint of code

which contains not only 

 it is tightly integrated with a companion Git repository

based on both

 with the RapidApp API, including how RapidApp integrates with the rest of the 

Ecosphere 


 of this module, 

 of , which will be our focus

Chinook is a freely available sample data model, with some nice sample data. It provides multiple tables with various types columns, indexes, relationships, foreign-key constraints, and so on. 

The focus

 open-source framework.

We're going to build this application around the free Chinook sample database in order to showcase 






#####

(A) - INTRO

Welcome to the RapidApp "Chinook" demo.

In this demo video we're going to build a new webapp from scratch, step by step, using RapidApp, with the "Chinook" sample database for the backend

We're going to build a Database-driven application, using the "RapidDbic" plugin, which is a component of RapidApp that provides out-of-the box front-ends for DBIx colon-colon Class, or "DBIC" for short. 

RapidDbic essentially auto-configures other RapidApp modules, which as we'll see, sets up grid and page views for DBIC Sources, proving CRUD, interactive query builders, customizable views, and so on 

For this demo, as I mentioned, we're going to use the Chinook sample database. Chinook is a freely available sample data model, with some nice sample data. It provides multiple tables with various types columns, indexes, relationships, foreign-key constraints, and so on. The purpose of Chinook is exactly for the type of demo we're doing in this video, showcasing the common use-cases for relational databases 


All steps will be performed live/real-world within this shell, which is an SSH session on an ordinary Linux box.

We will test as we go, and demonstrate the features and functionality in Firefox.

But all commands and changes will be done in this command shell and recorded with Git, and since you are already in the future, it is available on Github at the url shown 

I'm also recording the full command history - which is what is on the screen now, and is both the live commands being run, as well as serving the function of slides for this video













And these still only provide a base

Even though 

Large tables with many columns can make use of the add form 



Tables with lots of columns to be filled out may be better ser









Different combinations of these options can support all kinds of scenarios

Different workflow scenarios and table schemas benefit from different crud options

Despite being blank, these are real rows so we can as many as we want at once, while the system restricts .

Since these are In this mode, we can also create lots of blank rows at once


the database 

 in the toolbar.




Also, as a side note, I had made the pagesize smaller to avoid scrolling to make things easier to see, but the system does automatically scroll new rows into view, if necessary 

 column. Notice it now has a value for

Once the row has been saved it transforms into a real row

, and can be edited to change what that is. 


Phantom rows can be edited like any other row, and everyshow every column as dirty, and .

, just like the contents of the add form represent what will be inserted which we can edit like any other row.

It’s a phantom row representing 

still isn't really created until we click save, even though it shows in the grid


we still have to click Save 

 in a window.

 changes are also shown 

 as well as a red asterisk in the title. Dirty columns are shown by a red triangle, and 

, as well as .

Dirty columns are

Columns that have been changed, 

Column changes are are shown


, which now shows


 and shown visually  instead of sent to the servercan still be made

is off for the Track grid, changes  there are two new buttons in the toolbar, Save and Undo.


However, 




When the add form is off,

both the add form and persist_immediately-create are off the grid 









When the add form

If you set it to a different value, like 1, it just means the system will decide which to use. And, to explicitly turn it off simply set it to 0, which again, also changes the autoload_added_recorded default.


For consistency, the system requires that you enter all 3 options whenever setting persist_immediately, but, you can mix and match the values. For instance, you can turn off create, but leave update and destroy on. This combination turns off the add form without effecting the database, since you can edit columns in the grid before saving the new row.

On the other hand, if you turn off the add form without turning off persist_immediately-create, actual blank rows will be inserted into the database. 

Obviously, this requires that blank rows be allowed by the database schema to begin with, which means that all the columns in the table be nullable, auto-increments, or have non-conflicting default values configured.

Now let's save, commit and restart so we see these configs in action.



The add form is automatically






the process for entering data for new rows

new rowsfor how new rows 

how new rows are createdwhether or not 

much like a  persist changes in the database.

decides when to save outstanding changes instead of the system, which behaves more like a file-based application, with the traditional edit/save workflow.

It's up to the user when persist_immediately is turned off, which makes things behave more like editing a file on a file system. 


This is just like how you typically edit and save files on a filesystem, so you can think of persist_immediately as an autosave feature.

You can also choose whether or not to use the add form when creating rows with the use_add_form setting

This is straightforward for update and destroy, but what it means for create depends on the use_add_form setting

, especially for update and destroy, but the behavior of create is also determined by the . 

Instead of prompting the user for column values, the add button creates blank, empty rows when use_add_form is disabled. In this case, the persist_immediately-create setting 

Whether or not the blank rows are literally 



 which can then be edited like any other row.

 without , leaving them to be updated later on.

it for leaving update as the only avenue to set the values.

making editing the only way to supply  relying on editing . But of course, the new row can then be edited. 

This is like giving a new file a filename by saving it as a first step saving a new file and giving it a filename before creating a blank file, with a filename on disk, and saving it with a filename as a first step, instead of on disk as a first step, and then editing it, versus entering content before saving. The only meaningful difference between the two is when the first save happens, but has potentially larger significance in the case of multi-user databases

The persist_immediately-create setting adds the additional layer which determines if the blank rows will be literally inserted into the database, or remain virtual, giving the user a chance to set values before clicking save.

 until the user clicks save.

when the add form is disabled, 

This is a lot simpler than it might sound at first, and will make more sense in a moment when we're actually looking at it in the browser.






#### scratch......



provides the same workflow as the default config, just using the grid instead of the add form, since you can 

the grid functions like the add form, since you 

always have to enter all 3

You can mix and match persist_immediately settings, but . 

For the sake of consistency, you are required to configure all 3 at once in the single, parent option, but they don't have to be the same.



is dual-purpose which can be set to 'tab', which is the default true value, or 'window' to control if the form should load in a tab or window, as the names suggest.


You can also 


, but we can turned back on if we want to, which we'll do here.







become clear 

come back and edit the values

the add form the add button is turned off blank rows are createdthis is turned off the add function 

The add form 

The add form lets you supply the column values for the row at the same time it is being created. When it is turned off, rows are created blank, but then subsequently edited in the grid. There are pros and cons for each, which should become apparent momentarily.

use_add_form defaults to whatever persist_immediately-create is set to. Turning it on when persist_immediately-create is off just means you have to click save twice when creating rows, once in form and then again in the grid, which is usually redundant, but insignificant.

On the other hand, at the opposite-end of the spectrum, when the add form is turned off but persist_immediately-create left on, blank rows will be inserted into the database. Obviously, this requires that blank rows be allowed by the database schema to begin with, which means that all the columns in the table be nullable, auto-increments, or have non-conflicting default values configured.

And finally, when both are off, we're simply using the grid to set values instead of the add form, which makes no difference to the database.

If it's not clear already, it should be when I demo it in the browser in just a moment.

Use_add_form is a true/false, on/off setting, but true value is dual-purpose which can be set to 'tab', which is the default true value, or 'window' to control if the form should load in a tab or window, as the names suggest.

There is also a use_edit_form setting which supports the same false, window or tab choices.






saved to the database. 


and is off otherwise. So we'll have to set it manually if we want to keep using it for the Track grid.

if we still want to use it here we'll have to set it manually.

We can still turn it on when persist_immediately-create

defaults to on when , and off when it is off.

edited as a second step, instead of at the same time as creating the while creating the row


at the beginning of the process, to create rows with data as a single step, as opposed to the alternative workflow of creating blank rows first, and then subsequently using the grid to editing them.

In either case, the persist_immediately-create option determines what happens when the row is actually created, which creates 4 possible combinations.

This setting combines with persist_immediately 

 as opposed to creating blank rows. When its turned off, blank rows are created and then edited.


new rows are created blank first


 which is in contrast to, beforehand. When turned off, the process is reversed blank rows are created

create a new row with values, as a single step, as opposed to the two-step process of creating a blank row and then editing it.

By default both  

instead of the two-step process of creating a blank row

set column values when creating a new row, which is considered a single change.

simply allows setting the values of the new row

The default value 



 


the values can be mixed. 

For the sake of consistency, all three are configured together within a single parent option in the grid_params section, and you must set all three.

Persist_immediately is all on by default, which is what we've seen so far, 

a single option controls the settings all three are set under a single There can be different values for each, but all three must be set together.

Persist_immediately is also configured in the grid_params section

, as a hashref

settings but they must be All three are set together   independently. This is done with a hash

is set independently for , update and destroy, in the grid_params section.

It's on by default for all three, 

The effect of this setting is fairly straightforward in the case of update and destroy, but the behavior of create depends on …

Are Boolean options, so they combine to produce 4 possible modes for creating rows they produce 4 distinct modes


You can also control whether or not to use the add form when creating rows, which combines with the create-persist_immediately setting for 4 possible workflows   styles

different 

yeields different workflows depending on the 

There are also additional options that control how new rows get created when is either on or off.

The use_add_form 

There are also some additional create-specific options which combine with the persist_immediately setting for fine-grained control over the way adding new rows works.

to achieve specific workflows  


for fine-grained   options also available allow fine-grained control over 



but there are several different possible workflows for create. 

There are also several different workflows 

choices regarding the process of creating new rows

The persist_immediately option also affects the defaults of some other noteworthy settings that effect interface behavior.

use_add_form controls whether or not to prompt the user for column values when adding rows, which is all we've seen so far. It is on by default only when create-persist_immediately is on. 

autoload_added_record controls whether or not to open the row page after creating a new row, as we've also seen. It is on by default when use_add_form on, so turning off create-persist_immediately indirectly turns it off as well.

Of course these are only defaults and we can still set the options however we like. For instance, we can specifically enable the add form and have it load in a 'window'. The other supported mode is tab.

There is also a use_edit_form setting which supports the same false, window or tab choices.

As we'll see in a minute, when the add form is off you use the grid itself to create rows. The reason its default is tied to 

if you turn the aIf you turn the add form off


When the add form is disabled 

it is off the user can just use the grid to set values prior to saving, so the add form is unnecessary.


To explicitly turn off the add form just supply a false value, like 0. Turning off the add form is useful for simple tables where a form dialog is overkill


Conversely, we can turn off the add form but leave create-persist_immediately on, which will instantly create blank rows, so it will only work if all the columns are nullable or have default values, which happens to be the case for MediaType.

. This will only work if the table schema  
